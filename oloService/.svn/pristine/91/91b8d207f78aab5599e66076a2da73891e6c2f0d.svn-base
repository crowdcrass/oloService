package com.sys.common;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;


/**
 * HTTP处理
 * 
 * @author xmL
 * @version V1.00 2015-10-15
 * @since olo V1.0R001
 */
public class HttpAgent extends HttpPost
{
    private static final Logger LOGGER = Logger.getLogger(HttpAgent.class);
    // 默认编码
    private String charset = "UTF-8";
    private int statusLine;// 返回状态码
    // 默认超时时间,毫秒
    private static final int DEFAULT_TIMEOUT = 300000;
    private int timeout = 300000000;

    public HttpAgent(String url)
    {
        super(url);
    }

    public HttpAgent()
    {
        super();
    }

    public void setDefaultHeader()
    {
        this.addHeader("Content-type", "application/json; charset=UTF-8");
    }

    public void setContentHeader()
    {
        this.setHeader("contentEncoding", "charset=UTF-8");
    }

    /**
     * @param httpclient
     * @param jsonStr
     * @return 接口返回信息
     * @throws ClientProtocolException
     * @throws IOException
     */
    public String doPost(HttpClient httpclient, String jsonStr)
        throws ClientProtocolException, IOException
    {
        // 默认JSON传输
        this.setDefaultHeader();
        this.setContentHeader();
        // 接口返回
        String respJson = "";
        try
        {
            // 设置超时间
            if (timeout > 0)
            {
                httpclient.getParams().setIntParameter("http.socket.timeout",
                    timeout);
            }
            else
            {
                httpclient.getParams().setIntParameter("http.socket.timeout",
                    DEFAULT_TIMEOUT);
            }
            // 设置请求体,以及编码方式
            if (StringUtils.isNotBlank(jsonStr))
            {
                StringEntity reqEntity = new StringEntity(jsonStr, charset);
                this.setEntity(reqEntity);
            }
            HttpResponse response = httpclient.execute(this);
            statusLine = response.getStatusLine().getStatusCode();
            int statusCode = response.getStatusLine().getStatusCode();
            LOGGER.info("调用接口返回结果码（含义参考http结果码定义）：" + statusCode);
            if (statusCode == HttpStatus.SC_OK)
            {
                HttpEntity resEntity = response.getEntity();
                if (resEntity != null)
                {
                    respJson = EntityUtils.toString(resEntity, "UTF-8");
                }
            }
            else if (statusCode == HttpStatus.SC_UNAUTHORIZED)
            {
                LOGGER.info("没有权利访问此接口，原因可能是没有登陆成功，没有cookie产生，或者连接超时。");
            }
        }
        catch (Exception e)
        {
            LOGGER.error("http 连接异常：" + e);
        }
        return respJson;
    }

    public int getStatusLine()
    {
        return statusLine;
    }

    public static int getDefaultTimeout()
    {
        return DEFAULT_TIMEOUT;
    }

    // 返回HTTP相应状态码
    public int getstatusLine()
    {
        return statusLine;
    }

    public void setCharset(String charset)
    {
        this.charset = charset;
    }

    public void setUrl(String url)
        throws URISyntaxException
    {
        this.setURI(new URI(url));
    }

    /**
     * 设置连接超时
     * 
     * @param timeout
     */
    public void setTimeout(int timeout)
    {
        this.timeout = timeout;
    }

}
