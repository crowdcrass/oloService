<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
           http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc  
		   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"
	default-autowire="byName">
	<!-- 如果有多个 DispatcherServlet 请把关于数据库和server部分的bean在web.xml中使用spring 的 listener加载-->
	<!-- 自动扫描controller bean，把作了注解的类转换为bean -->
	<context:component-scan base-package="com.amiba" />
	<context:component-scan base-package="com.sys" />
	<mvc:annotation-driven/>
	<mvc:default-servlet-handler/>
	
	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    	<!-- 设置上传文件的最大尺寸为10MB -->  
	    <property name="maxUploadSize">  
	        <value>1048576000</value>  
	    </property>  
	    	<property name="maxInMemorySize">
			<value>1024</value>
		</property>
    </bean>
    
<!--     <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> -->
		<!-- 拦截器注册 -->
<!-- 		<property name="interceptors"> -->
<!-- 			<bean class="javacommon.springmvc.interceptor.SharedRenderVariableInterceptor"/> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	 <!-- 拦截器 -->  
	<!-- 多个拦截器,顺序执行 -->  
	<!-- 
    <mvc:interceptors>  
        <mvc:interceptor>  
           <mvc:mapping path="/**" />
           <bean class="javacommon.springmvc.interceptor.VerifyUrlInterceptor"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors> 
    
	<mvc:resources mapping="/js/**" location="/js/" /> 
	<mvc:resources mapping="/css/**" location="/css/" /> 
	<mvc:resources mapping="/images/**" location="/images/" /> 
     -->
     <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
				<value>classpath:config/syscfg.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>
	<!-- 数据源 -->
<!-- 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>
		<property name="url">
			<value>jdbc:mysql://182.254.150.196:3306/olo</value>
		</property>
		<property name="username">
			<value>root</value>
		</property>
		<property name="password">
			<value>root</value>
		</property>
	</bean> -->
	
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="180" />
		<property name="acquireIncrement" value="5" />
		<property name="maxStatements" value="0" />
		<property name="initialPoolSize" value="15" />
		<property name="idleConnectionTestPeriod" value="1" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
		   <ref bean="dataSource" />
		</property>
	</bean>
	
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:config/sql-map-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="iBatisDaoSupport"
		class="org.springframework.orm.ibatis.support.SqlMapClientDaoSupport"
		abstract="true">
		<property name="sqlMapClientTemplate" ref="sqlMapClientTemplate" />
	</bean>
	
	
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	<!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/pages" p:suffix=".jsp">
		<property name="order" value="0"/>
	</bean>
	<!-- 自定义exception处理 -->
	<bean id="exceptionResolver" class="com.amiba.core.CommonExceptionHandler"/>
	<!-- 国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>i18n/messages</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="true" />
	</bean>
	<!-- 国际化 end-->
	
	
	
	<!-- The Task Bean -->

	<!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法-->
	<bean id="taskJob" class="com.amiba.timer.TimerAction"/><!-- 这个是要执行的任务类 -->
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="group" value="job_work"/>
	    <property name="name" value="job_work_name"/>
	    <!--false表示等上一个任务执行完后再开启新的任务-->
	    <property name="concurrent" value="false"/>
	    <property name="targetObject">
	        <ref bean="taskJob"/>
	    </property>
	    <property name="targetMethod">
	        <value>runFunction</value>
	    </property>
	</bean>
	 
	<!--  调度触发器 -->
	<bean id="myTrigger"
	      class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="name" value="data_import"/>
	    <property name="group" value="dataWork"/>
	    <property name="jobDetail">
	        <ref bean="jobDetail" />
	    </property>
	    <property name="cronExpression">
	        <value>${data.cron.time}</value>
	    </property>
	</bean>
	 	
	<!-- 调度工厂 -->
	<bean id="scheduler" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="myTrigger"/>
	        </list>
	    </property>
	</bean>
</beans>  