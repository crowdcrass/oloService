package com.sys.wx.web;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.org.rapid_framework.web.scope.Flash;

import com.platform.common.data.CommonUtil;
import com.sys.wx.service.ProAttrTypeService;
import com.sys.wx.service.ProAttributeService;
import com.sys.wx.service.ProductTypeService;


@Controller
@RequestMapping("/attrType")
public class ProAttrTypeController
{
    private static Logger log = Logger.getLogger(ProAttrTypeController.class);

    @Autowired
    private ProAttrTypeService proAttributeTypeService;

    @Autowired
    private ProAttributeService proAttributeService;

    @Autowired
    private ProductTypeService productTypeService;

    /**
     *跳转到分类首页
     * @param request
     * @return String
     */
    @RequestMapping("/index")
    public String index(HttpServletRequest request)
    {
        //      List<Map<String,Object>> attrType = proAttributeTypeService.list();
        //      request.setAttribute("attrType", attrType);
        Flash.current().put("menuTreeJson",
            JSONArray.fromObject(this.loadTypeTreeMenu(request)).toString(3));
        return "/wx/attributeType/index";
    }

    public String loadTypeTreeMenu(HttpServletRequest request)
    {
        List<Map<String, Object>> menuList = proAttributeTypeService.findTypeMenus();
        return CommonUtil.toJSONString(menuList);
    }

    /**
     * 根据分类id查询分类详情
     *〈一句话功能简述〉
     * @param request
     * @return String
     */
    @RequestMapping("/queryAttrTypeById")
    public String queryAttrTypeById(ModelMap model, HttpServletRequest request)
    {
        model.put("attributeMap",
            proAttributeTypeService.queryAttrTypeById(request));
        return "/wx/attributeType/show";
    }

    /**
     *  跳转到增加页面
     *  @author yl
     */
    @RequestMapping(value = "/addPage")
    public String addPage(ModelMap model, HttpServletRequest request,
                          HttpServletResponse response)
    {
        Flash.current().put("menuTreeJson",
            JSONArray.fromObject(this.loadTypeTreeMenu(request)).toString(3));
        return "/wx/attributeType/add";
    }

    /**
     *  增加
     *  @author yl
     */
    @RequestMapping(value = "/addType")
    public String addType(ModelMap model, HttpServletRequest request,
                          HttpServletResponse response)
    {
        String flag = proAttributeTypeService.addType(request);
        model.put("flag", flag);
        return "/wx/attributeType/add";
    }

    /**
     *  跳转到修改页面
     *  @author yl
     */
    @RequestMapping(value = "/edit")
    public String editNode(ModelMap model, HttpServletRequest request,
                           HttpServletResponse response)
    {
        Map<String, Object> attrTypeMap = proAttributeTypeService.queryAttrTypeById(request);
        model.put("attrTypeMap", attrTypeMap);
        Flash.current().put("menuTreeJson",
            JSONArray.fromObject(this.loadTypeTreeMenu(request)).toString(3));
        return "/wx/attributeType/edit";
    }

    /**
     *  修改
     *  @author yl
     */
    @RequestMapping(value = "/update")
    public String update(ModelMap model, HttpServletRequest request,
                         HttpServletResponse response)
    {
        String flag = proAttributeTypeService.updateType(request);
        model.put("flag", flag);
        return "/wx/attributeType/edit";
    }

    /**
     * 删除
     *  @author yl
     */
    @ResponseBody
    @RequestMapping(value = "/delType")
    public String delType(ModelMap model, HttpServletRequest request,
                          HttpServletResponse response)
    {
        String flag = proAttributeTypeService.delType(request);
        return flag;
    }

    @RequestMapping("/getType")
    public String getType(HttpServletRequest request)
    {
        //		List<Map<String,Object>> attrType = proAttributeTypeService.list();
        //		request.setAttribute("attrType", attrType);
        Flash.current().put("menuTreeJson",
            JSONArray.fromObject(this.loadTreeMenu(request)).toString(3));
        return "/wx/attribute/attributeType";
    }

    public String loadTreeMenu(HttpServletRequest request)
    {
        List<Map<String, Object>> menuList = productTypeService.findMenus();
        return CommonUtil.toJSONString(menuList);
    }

    @RequestMapping("/list")
    public String list(HttpServletRequest request, Integer mtId, String attrName)
    {
        Map map = proAttributeTypeService.getAttribute(request, mtId, attrName);
        request.setAttribute("attrMap", map);
        request.setAttribute("mtId", mtId);
        request.setAttribute("attrName", attrName);
        return "/wx/attribute/attributeTypeList";
    }

    @RequestMapping("/add")
    public String addAttribute(HttpServletRequest request,
                               HttpServletResponse response)
    {
        Integer AT_MTID = Integer.parseInt(request.getParameter("AT_MTID"));
        if ("GET".equalsIgnoreCase(request.getMethod()))
        {
            //加载树
            loadTree();
            return "/wx/attribute/attributeTypeAdd";
        }
        else
        {
            if (proAttributeTypeService.isLast(AT_MTID))
            {
                proAttributeTypeService.addOrUpdate(request);
                setMessage(request, "保存成功");
                log.debug("商品属性分类保存成功，时间：" + new Date());
            }
            else
            {
                setMessage(request, "只能在最后一级分类下保存属性");
            }
            return list(request, AT_MTID, null);
        }
    }

    @RequestMapping("/del")
    public String delAttribute(HttpServletRequest request,
                               HttpServletResponse response)
        throws IOException
    {
        Integer AT_MTID = Integer.parseInt(request.getParameter("mtId"));
        Integer id = Integer.parseInt(request.getParameter("id"));
        if (proAttributeService.count(id))
        {
            setMessage(request, "该属性分类下面有属性值，不能删除");
        }
        else
        {
            proAttributeTypeService.deleAttribute(id);
            setMessage(request, "删除成功");
        }
        return list(request, AT_MTID, null);
    }

    @RequestMapping(value = "/getAttr", produces = "text/html;charset=UTF-8")
    @ResponseBody
    public String getAttributeByPro(Integer proTypeId, String attr)
        throws UnsupportedEncodingException
    {
        String attrHtml = proAttributeTypeService.getAttributeByPro(proTypeId,
            attr);
        return attrHtml;
    }

    private void loadTree()
    {
        List<Map<String, Object>> menuList = productTypeService.findMenus();
        String proType = CommonUtil.toJSONString(menuList);
        Flash.current().put("menuTreeJson",
            JSONArray.fromObject(proType).toString(3));
    }

    private void setMessage(HttpServletRequest request, String msg)
    {
        String message = "<script>alert('" + msg
                         + "');parent.location.reload();</script>";
        request.setAttribute("message", message);
    }
}
